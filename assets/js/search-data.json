{
  
    
        "post0": {
            "title": "Java Data Types",
            "content": "Sample Binary Addition . import java.util.Scanner; public class JavaBinaryAdder { public static void main(String[] args) { //Two variables to hold two input binary numbers long b1, b2; int i = 0, carry = 0; //This is to hold the output binary number int[] sum = new int[10]; //To read the input binary numbers entered by user Scanner scanner = new Scanner(System.in); //getting first binary number from user System.out.print(&quot;Enter first binary number: &quot;); b1 = scanner.nextLong(); System.out.print(b1); System.out.println(); //getting second binary number from user System.out.print(&quot;Enter second binary number: &quot;); b2 = scanner.nextLong(); System.out.print(b2); System.out.println(); //closing scanner after use to avoid memory leak scanner.close(); while (b1 != 0 || b2 != 0) { sum[i++] = (int)((b1 % 10 + b2 % 10 + carry) % 2); carry = (int)((b1 % 10 + b2 % 10 + carry) / 2); b1 = b1 / 10; b2 = b2 / 10; } if (carry != 0) { sum[i++] = carry; } --i; System.out.print(&quot;Output: &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); } System.out.print(&quot; n&quot;); } } JavaBinaryAdder.main(null); . Enter first binary number: 1111 Enter second binary number: 10101 Output: 100100 . Code Example: Before and After Multiplying by 5 . import java.util.Scanner; public class MultiplyBy5 { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n *= 5: n = &quot; + n); // prints 5 n = n *= 5; System.out.println(&quot; tAfter n *= 5: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 0; Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter number: &quot;); n = scanner.nextInt(); System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } MultiplyBy5.main(null); . Enter number: Main method before changeInt(n): n = 6 In changeInt method Before n *= 5: n = 6 After n *= 5: n = 30 Main method after changeInt(n): n = 6 . Converting to Wrapper Class . int primitiveInt = n; Integer[] wrapperIntArray = new Integer[] { primitiveInt }; Integer wrapperInt = wrapperIntArray[0]; . Exploring Teacher Code: . What are Methods and Control Structures? . A method, also known as a function or subroutine, is a block of code that performs a specific task. Methods can be called multiple times and can accept input parameters and return output values. They are used to break down complex tasks into smaller, more manageable units of code. | Control structures are used to control the flow of execution in a program. They determine the order in which statements are executed based on certain conditions. There are three main types of control structures: Conditional statements: These are used to execute a certain block of code only if a particular condition is met. Examples include the &quot;if&quot; statement, the &quot;else&quot; statement, and the &quot;switch&quot; statement. | Looping statements: These are used to repeat a block of code until a particular condition is met. Examples include the &quot;for&quot; loop, the &quot;while&quot; loop, and the &quot;do-while&quot; loop. | Jump statements: These are used to transfer control to another part of the program. Examples include the &quot;break&quot; statement, the &quot;continue&quot; statement, and the &quot;return&quot; statement. | | . Diverse Arrays . This code definitely contains multiple Methods and Control Structures. The Methods are seen in functions such as arraySum(), rowSums(), and isDiverse(), as they are called in different places within the class and each do their own procedure. The Control Structures can be seen in the multiple conventional for loops in each of the methods. | The primary data types in the diverse matrix code are int and boolean as ints are used to stare the numbers within the 2D arrays and a boolean is used to provide the final answer as to whether the sums of the array rows are diverse or not. | . Math.random() . Math.random() is a built-in method in Java that returns a pseudo-random double value between 0.0 and 1.0 (inclusive). | This method uses a mathematical algorithm to generate random numbers, which means that the numbers are not truly random but are determined by the algorithm.- int randomNum = (int)(Math.random() * 10); returns a value between 0.0 and 1.0, which is then multiplied by 10 and cast to an integer. The resulting value is a random integer between 0 and 9. | If you want to get an integer value between 7 and 9, you can cast the result of the expression to an int, like this: int randomInt = (int) (Math.random() * 2 + 7); Here, Math.random() * 2 generates a random value between 0 and 2, and then adding 7 to it will shift the range to be between 7 and 9. | . DoNothingByValue . Seems to be multiple ways in order to change input such as arrays of numbers or strings into default values/empty arrays of 0. | This is done by creating a default array arr and setting all the values to 0 through the use of conventional for loops. ### IntByReference | Wraps int inputs into Integers, because they need to be objects in order to work with the swapper method. | In order to swap values if the latter one is lesser, the value is stored in a tmp variable in order to switch around. ### Menu | . import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class MultiplyBy5 { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n *= 5: n = &quot; + n); // prints 5 n = n *= 5; System.out.println(&quot; tAfter n *= 5: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 0; Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter number: &quot;); n = scanner.nextInt(); System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 System.out.println(); } } /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Multiply By 5&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; MultiplyBy5.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); System.out.println(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { System.out.println(&quot;Goodbye!&quot;); if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } }Driver.main(null); . Hacks Menu: 0 ==&gt; Exit 1 ==&gt; Multiply By 5 2 ==&gt; Do Nothing 3 ==&gt; Swap if Hi-Low 4 ==&gt; Matrix Reverse 5 ==&gt; Diverse Array 6 ==&gt; Random Squirrels Enter number: Main method before changeInt(n): n = 346 In changeInt method Before n *= 5: n = 346 After n *= 5: n = 1730 Main method after changeInt(n): n = 346 Hacks Menu: 0 ==&gt; Exit 1 ==&gt; Multiply By 5 2 ==&gt; Do Nothing 3 ==&gt; Swap if Hi-Low 4 ==&gt; Matrix Reverse 5 ==&gt; Diverse Array 6 ==&gt; Random Squirrels Goodbye! . MenuRow is a method because it&#39;s a piece of code grouped together in a way that performs a specific task - initializing each row of the menu - and it&#39;s called over and over in the driver class. Though the MenuRow class itself is not a control structure, it is part of a switch case used in the Driver class which is. | The Driver mainly has a switch case control structure, in which different operations are performed depending on which int is typed into the scanner. For example there is a section of code where there&#39;s an if statement stating that if 0 is typed into the scanner, the menu will exited out of. | . Explore AP Classroom . The Exam . MC is 40 questions in 90 minutes (2 mins per question) | 4 FRQs in 90 minutes | . 2022 FRQ 1 . public class Digits { /** The list of digits from the number used to construct this object. * The digits appear in the list in the same order in which they appear in the original number. */ private ArrayList&lt;Integer&gt; digitList; public Digits(int num) { // if num is 0 or positive digitList = new ArrayList&lt;Integer&gt;(); if (num == 0) { // if num is 0 digitList.add(new Integer(0)); // copying each digit into arraylist } while (num &gt; 0) { // if num is 1 or greater digitList.add(0, new Integer(num % 10)); // dividing by 10 so that only the digit is stored num /= 10; } } public boolean isStrictlyIncreasing() { for (int i = 0; i &lt; digitList.size()-1; i++) { // looping through each item in digitlist if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()) { // if digit at index i is greater than at index i+1 (not sorted) return false; } } return true; // otherwise return true } } . AP CSA FRQ 2017 Methods and Control Structures . https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-frq-2017.pdf | . FRQ 4 Solution . part a: | . public static Position findPosition(int num, int[][] intArr) { // input is entered and saved as num for (int row=0; row &lt; intArr.length; row++) { // iterates through each row for (int col=0; col &lt; intArr[0].length; col++) { // iterates through each column in the row if (intArr[row][col] == num) { // if value = num return new Position(row, col); // return the value } } } return null; } . part b: | . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] newArr = new Position[intArr.length][intArr[0].length]; for (int row=0; row &lt; intArr.length; row++) { for (int col=0; col &lt; intArr[0].length; col++) { // iterates through rows and columns newArr[row][col] = findPosition(intArr[row][col]+1, intArr); // returns the coordinates of where that specific number is in the first array } } return newArr; // displays as a whole new array of coordinates } . Discussion of Methods &amp; Control Structures: . To iterate and perform operations throughout the 2D there are multiple For Loops that iterate through each value of the array to perform operations on it. | findPosition() and getSuccessorArray() are both methods that complete a specific task. | .",
            "url": "https://xiaoa0.github.io/t3trio/fastpages/jupyter/2023/03/06/java-data-types.html",
            "relUrl": "/fastpages/jupyter/2023/03/06/java-data-types.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://xiaoa0.github.io/t3trio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "We are 3 computer science students working to create a learning aid for the Java-based CSA class. .",
          "url": "https://xiaoa0.github.io/t3trio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Hello! . This is an html page running with fastpages. .",
          "url": "https://xiaoa0.github.io/t3trio/hello.html",
          "relUrl": "/hello.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xiaoa0.github.io/t3trio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}